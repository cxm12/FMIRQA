import math
import numpy as np
from scipy.stats import pearsonr
from scipy.stats import kendalltau


def calculate_srocc(actual_values, predicted_values):
    # 计算SRCC
    srocc, _ = pearsonr(actual_values, predicted_values)
    
    # 计算Kendall's rank correlation coefficient (KRCC)
    tau, p_value = kendalltau(actual_values, predicted_values)
    
    return srocc, tau


def list_plcc(list1, list2):
    # 将list转换为numpy数组
    arr1 = np.array(list1)
    arr2 = np.array(list2)
    
    # 归一化数据
    arr1_normalized = (arr1 - arr1.min()) / (arr1.max() - arr1.min())
    arr2_normalized = (arr2 - arr2.min()) / (arr2.max() - arr2.min())
    
    # 计算pearson相关系数
    correlation, p_value = pearsonr(arr1_normalized, arr2_normalized)
    
    # 计算PLCC
    plcc = 0.5 * (correlation + 1)
    
    return plcc


def IQA_measure(actual, predicted):
    # 计算SROCC
    srocc_value, krcc = calculate_srocc(actual, predicted)
    print(f"SROCC: {srocc_value}", f"KRCC: {krcc}")
    
    # 计算 RMSE
    def rmse(predictions, targets):
        differences = [pred - targ for pred, targ in zip(predictions, targets)]
        differences_squared = [difference ** 2 for difference in differences]
        mean_difference_squared = sum(differences_squared) / len(predictions)
        rmse_value = math.sqrt(mean_difference_squared)
        return rmse_value
    
    rmse1 = rmse(actual, predicted)
    print(f"RMSE: {rmse1}")
    
    # 计算PLCC
    plcc_value = list_plcc(actual, predicted)
    print(f"PLCC: {plcc_value}")


def CalDenoiseQA_T():
    print('------------------------------  Denoising_Tribolium  ---------------------------------')
    psnrRefSR = [
        31.295, 22.861, 36.720, 38.629, inf, 33.527,  # condition = 1
        29.774, 22.286, 33.942, 36.685, inf, 31.443,
        28.566, 21.333, 31.121, 33.255, 28.566, 25.887
    ]
    ssimRefSR = [
        0.8824, 0.3224, 0.8076, 0.9536, 1.0, 0.9215,
        0.8755, 0.2326, 0.7537, 0.9454, 1.0, 0.9208,
        0.8533, 0.1601, 0.643, 0.9027, 0.8533, 0.7691
    ]
    psnrRefGT = [
        inf, 23.046, 30.706, 31.391, 31.295, 29.938,
        inf, 21.71, 29.861, 29.714, 29.774, 27.838,
        inf, 20.623, 28.32, 28.789, 28.566, 25.887
    ]
    ssimRefGT = [
        1.0, 0.3349, 0.7597, 0.8882, 0.8824, 0.8433,
        1.0, 0.2372, 0.7274, 0.8682, 0.8755, 0.8063,
        1.0, 0.1575, 0.6109, 0.83417, 0.8533, 0.7691
    ]
   
    IQA_measure(psnrRefGT, psnrRefSR)
    IQA_measure(ssimRefGT, ssimRefSR)
    IQA_measure(psnrRefGT, ssimRefSR)
    IQA_measure(ssimRefGT, psnrRefSR)
    

def CalDenoiseQA_P():
    print('-------------------------------  Plan  -------------------------------')
    psnrRefSR = [
        37.535, 20.231, 37.510, 43.353, inf, 40.589,  # condition = 1
        35.408, 17.887, 33.343, 41.131, inf, 39.857,
        32.819, 15.676, 28.47, 34.639, inf, 39.519
    ]
    ssimRefSR = [
        0.7872, 0.2355, 0.8924, 0.9158, 1.0, 0.8706,
        0.759, 0.1833, 0.8655, 0.8757, 1.0, 0.8662,
        0.6858, 0.1652, 0.7732, 0.9119, 1.0, 0.9447
    ]
    # Between HR Denoising_Planaria
    psnrRefGT = [
        inf, 22.126, 33.285, 37.569, 37.535, 39.725,
        inf, 18.818, 29.19, 33.785, 35.408, 37.909,
        inf, 14.767, 24.548, 28.179, 32.819, 34.006
    ]
    ssimRefGT = [
        1.0, 0.2500, 0.6860, 0.8120, 0.7872, 0.8562,
        1.0, 0.1622, 0.5809, 0.7073, 0.759, 0.8078,
        1.0, 0.0928, 0.4192, 0.5333, 0.6858, 0.7341
    ]
    
    IQA_measure(psnrRefGT, psnrRefSR)
    IQA_measure(ssimRefGT, ssimRefSR)
    IQA_measure(psnrRefGT, ssimRefSR)
    IQA_measure(ssimRefGT, psnrRefSR)


def CalProjQA():
    print("-------------------projection_Refswinir----------------")
    psnrRefSR = [21.697,17.60752, 26.640253,23.12474, inf,
                 20.8734,18.871944,27.0552, 27.5183, inf,
                 25.55846,23.833, 23.08079,23.379, inf,
                 21.08033,18.04985, 26.46105, 25.479035, inf]
    ssimRefSR = [
        0.4157,0.28733438,0.8389313, 0.6843077, 1.0,
        0.46, 0.3437,0.8706, 0.86583, 1.0,
        0.8099959, 0.7728859,0.7491754, 0.7810311, 1.0,
        0.42530409, 0.29717222, 0.8657017, 0.7838105, 1.0]
    
    # meanSR between input and HR
    psnrRefHR = [
        inf, 20.659, 21.016, 21.023, 21.697,
        inf, 19.751, 21.999, 21.056, 20.873,
        inf, 32.356, 30.407, 28.746, 25.558,
        inf, 20.132, 20.884, 20.768, 21.080
    ]
    ssimRefHR = [
        1.0, 0.3533, 0.3819, 0.3411, 0.4157,
        1.0, 0.3643, 0.5243, 0.4669, 0.4600,
        1.0, 0.8935, 0.8657, 0.8077, 0.81,
        1.0, 0.3494, 0.4431, 0.3853, 0.4253
    ]
    
    print('QA of PSNR')
    print(kendalltau(psnrRefHR, psnrRefSR))
    print(kendalltau(ssimRefHR, psnrRefSR))

    print('QA of ssim')
    print(kendalltau(psnrRefHR, ssimRefSR))
    print(kendalltau(ssimRefHR, ssimRefSR))


def CalISOQA():
    print('-----------------------------  ISO  ---------------------------')
    inf = 40
    # meanSR between input and SR of LR
    psnrRefSRXZ = [27.248, 28.390, 30.850, inf, 28.630]
    ssimRefSRXZ = [0.6550, 0.8222, 0.8808, 1.0, 0.8443]
    psnrRefSRXY = [27.208, 30.228, 30.301, inf, 28.184]
    ssimRefSRXY = [0.6465, 0.8445, 0.8693, 1.0, 0.8386]
    psnrRefSR = psnrRefSRXZ + psnrRefSRXY
    ssimRefSR = ssimRefSRXZ + ssimRefSRXY
    
    # meanSR between input and HR
    psnrRefHRXZ = [inf, 27.204, 25.912, 27.248, 26.238]
    ssimRefHRXZ = [1.0, 0.6390, 0.6321, 0.6550, 0.6352]
    psnrRefHRXY = [inf, 27.932, 24.999, 27.208, 25.870]
    ssimRefHRXY = [1.0, 0.6446, 0.5963, 0.6465, 0.6138]
    psnrRefHR = psnrRefHRXZ + psnrRefHRXY
    ssimRefHR = ssimRefHRXZ + ssimRefHRXY
    
    # print("---- Isotropic ----")
    IQA_measure(psnrRefHR, psnrRefSR)
    IQA_measure(ssimRefHR, ssimRefSR)
    IQA_measure(psnrRefHR, ssimRefSR)
    IQA_measure(ssimRefHR, psnrRefSR)
    

def CalSRQA_ER():
    print('---------------------------------------- ER ----------------------------------------------------')
    psnr_RefGT = [inf, 22.72, 18.778, 22.595, 22.23, 22.288, 17.424, 18.79, 21.03, 29.699,
                  30.974, 29.069, 27.989, 28.89, 29.195, 29.3402, 29.525, 29.208, 29.662, 27.931, 29.378,
                  29.236, 29.674, 29.866]
    ssim_RefGT = [1.0, 0.7746, 0.7131, 0.772, 0.7573, 0.7514, 0.6077, 0.7072, 0.7367, 0.8916, 0.9277,
                  0.8679, 0.8125, 0.8555, 0.8635, 0.8693, 0.8764, 0.8783, 0.8851, 0.8677, 0.886,
                  0.875, 0.8948, 0.8882]
    psnr_RefSR = [29.699, 23.031, 19.089, 22.887, 22.501, 22.567, 17.651, 19.075, 21.785, inf, 31.9,
                  32.174, 29.926, 31.53, 31.829, 32.523, 32.814, 32.174, 32.459, 29.514, 32.321,
                  31.174, 31.704, 31.821]
    ssim_RefSR = [0.8916, 0.799, 0.74847, 0.7946, 0.7828, 0.7722, 0.6365, 0.74046, 0.7826, 1.0, 0.939,
                  0.9468, 0.9021, 0.9282, 0.9357, 0.948, 0.9524, 0.9519, 0.9519, 0.9034, 0.9446,
                  0.9293, 0.9384, 0.9502]
    niqe = [21.1591, 36.599, 8.5472, 19.997, 20.1756, 22.1229, 19.9285, 9.7025, 7.8345, 12.0925, 12.9424, 11.164,
            21.0926, 9.6945, 9.3374, 9.6533, 9.6526, 9.6809, 10.0561, 9.2456, 9.7381, 9.3137, 8.8182, 9.5372]
    niqe = [-i for i in niqe]
    FRC = [2.7213787619225123, 2.4959060976330254, 0.10726890850701552, 0.026620490585846496, 0.0, 0.0,
           4.738353162420622, 0.35188779288916855, 2.7913177502774795, 2.1632192001075876, 1.8437937458841582,
           1.8610973946413594, 0.0, 1.4256993701108198, 2.078188742300909, 2.0026385675831917, 1.8988878758761663,
           1.953736551038379, 1.5572514623879212, 1.7163135320809983, 1.4889342312570173, 2.574019469506133,
           2.4020968778165006, 1.8458075382120938]
    fwhm = [204.19779247,195.7008739856,192.37895803237,195.723071242, 195.5131601252,195.7152908776,192.0688020292,192.3083037093,190.65062393648,198.2003756779,202.74376654189,198.1417646927,196.096582342,195.4604304478,194.41584885689,198.492159634,197.12626628667,199.350092857,198.91039931977,214.3112221051,198.08789676,196.56115017275,201.856578242,200.698313]
    fwhm = [-i for i in fwhm]
    print(kendalltau(psnr_RefGT, psnr_RefSR))
    print(kendalltau(ssim_RefGT, ssim_RefSR))
    print(kendalltau(psnr_RefGT, FRC))
    print(kendalltau(ssim_RefGT, FRC))
    print(kendalltau(psnr_RefGT, niqe))
    print(kendalltau(ssim_RefGT, niqe))
    print(kendalltau(psnr_RefGT, fwhm))
    print(kendalltau(ssim_RefGT, fwhm))
    print(kendalltau(psnr_RefGT, ssim_RefSR))
    print(kendalltau(ssim_RefGT, psnr_RefSR))
    

def CalSRQA_CCPs():
    print('--------------------------------------- CCPs ---------------------------------------------------')
    psnr_RefGT = [inf, 19.911, 19.859, 20.121, 20.004, 19.837, 19.337, 19.901, 20.804, 28.627,
                  26.865, 28.388, 26.357, 27.894, 27.863, 28.262, 28.426, 28.405, 27.499, 29.425, 28.234,
                  27.799, 27.424, 29.252]
    ssim_RefGT = [1.0, 0.1756, 0.1758, 0.1665, 0.1768, 0.1722, 0.1675, 0.1737, 0.2348, 0.9455,
                  0.9005, 0.9427, 0.4652, 0.9338, 0.9045, 0.9394, 0.9412, 0.9462, 0.9199, 0.9556, 0.9401,
                  0.8124, 0.9197, 0.9527]
    psnr_RefSR = [28.627, 20.164, 20.093, 20.412, 20.277, 20.092, 19.563, 20.157, 21.165, inf, 30.657,
                  34.755, 29.166, 32.476, 32.848, 34.463, 33.89, 32.695, 32.006, 33.653, 34.125,
                  32.814, 32.203, 33.14]
    ssim_RefSR = [0.9455, 0.1792, 0.1793, 0.1704, 0.1805, 0.1756, 0.169, 0.1773, 0.2367, 1.0, 0.9295,
                  0.9816, 0.4792, 0.968, 0.933, 0.9788, 0.9772, 0.9756, 0.9504, 0.9770, 0.9795,
                  0.8411, 0.9535, 0.9764]
    niqe = [21.1591, 36.5991, 8.7484, 28.7821, 29.0289, 28.2498, 11.5719, 10.0533, 7.8345,
            12.0925, 12.9424, 11.164, 21.0926, 26.0804, 20.8531, 26.8065, 26.5777, 26.6604, 27.3949, 26.3787, 26.6657,
            27.8164, 25.8899, 26.7232]
    niqe = [-i for i in niqe]
    FRC = [3.0350654164344144, 3.3888412700119597, 1.8622637033847667, 1.0496496727021998, 0.16671985266316103, 0.0,
           5.318459061863929, 1.622287078285425, 3.0126460246591558, 3.018340103799809, 2.991278713443931,
           2.995515794593433, 0.0, 3.005273985806059, 3.1295294557831768, 3.013739265709784, 3.004973973196388,
           3.0415145529140335, 3.055003901070041, 2.9918673344462845, 3.005338432139419, 3.2543457911150724,
           3.3109742156880086, 2.967995087539434]
    fwhm = [169.581157,198.668522954553,196.52686474,199.04139,195.086507565,195.307685,197.038990113,196.37579269,190.4415775,172.904512558,171.179869,174.0846834,191.3237355837,176.8270164,172.50342845,169.96863845,173.625383,178.330326,161.2167849,180.1819080776,175.71247576,182.92160895,176.85108,169.58115716]
    fwhm = [-i for i in fwhm]
    print(kendalltau(psnr_RefGT, psnr_RefSR))
    print(kendalltau(ssim_RefGT, ssim_RefSR))
    print(kendalltau(psnr_RefGT, FRC))
    print(kendalltau(ssim_RefGT, FRC))
    print(kendalltau(psnr_RefGT, niqe))
    print(kendalltau(ssim_RefGT, niqe))
    print(kendalltau(psnr_RefGT, fwhm))
    print(kendalltau(ssim_RefGT, fwhm))
    
    print(kendalltau(psnr_RefGT, ssim_RefSR))
    print(kendalltau(ssim_RefGT, psnr_RefSR))
    

def CalSRQA_Fact():
    print('--------------------------------------- F-actin-------------------------------------------------')
    psnr_RefGT = [inf, 19.943, 19.45, 19.775, 19.624, 19.521, 18.384, 19.516, 20.275, 25.643, 25.125,
                  25.821, 22.45, 25.6, 25.729, 25.811, 25.478, 25.997, 26.343, 25.35, 25.693, 24.621,
                  24.97, 26.012]
    ssim_RefGT = [1.0, 0.5648, 0.53397, 0.5584, 0.56416, 0.54386, 0.4912, 0.5419, 0.59266, 0.7036, 0.71003,
                  0.7105, 0.5786, 0.67964, 0.6947, 0.70692, 0.7025, 0.7063, 0.6915, 0.7087, 0.6999, 0.6555,
                  0.6698, 0.7072]
    psnr_RefSR = [25.643, 20.095, 19.544, 19.9018, 19.748, 19.627, 18.446, 19.623, 20.525, inf, 29.627, 32.235,
                  23.809, 30.837, 31.386, 32.9429, 31.828, 33.693, 30.968, 31.1546, 31.99, 28.571, 29.321, 31.76]
    ssim_RefSR = [0.7036, 0.756, 0.6907, 0.74502, 0.76109, 0.7174, 0.62916, 0.71188, 0.78175, 1.0, 0.9531, 0.96128,
                  0.76028, 0.92979, 0.9461, 0.9657, 0.963, 0.9654, 0.9395, 0.9535, 0.9551, 0.86128, 0.8591, 0.9593]
    FRC = [2.9410664071428694, 2.6703562512469894, 1.2049886684900444, 0.8620164860355538, 0.16322298206349722, 0.0, 5.755662885089806, 1.1861821314499361, 2.3813371873463565, 2.054936264452844, 2.5468865888997776, 1.8359822705504294, 0.0, 1.915509575888376, 2.408134537629507, 2.281655458817434, 2.1532472464189985, 2.1816519252032536, 0.9506188225901133, 1.816353485138429, 2.0605740019022156, 2.913138848659715, 3.0285150039693183, 1.6052454275611134]
    niqe = [21.1591, 36.5991, 7.5609, 20.7091, 21.1443, 21.7463, 12.7403, 8.2257, 7.8345, 12.0925, 12.9424,
            11.164, 21.0926, 8.7857, 8.2396, 8.6827, 8.7313, 8.8582, 8.8432, 9.0316, 8.4833, 7.6997, 7.4311, 8.9039]
    niqe = [-i for i in niqe]
    fwhm = [233.314259879, 232.7479326, 232.454292208, 232.9296528981, 232.63063909574, 232.6576050808, 234.1553864352, 232.56227408325265,230.8794522634,228.7580808389,232.22572464688,232.2316430219, 231.37327227828,230.9231440188,229.647754239,230.51497783282,230.08009939,231.994825631,228.998396171,233.037446895,230.901134183,225.931612229,227.589055419,231.5793450312]
    fwhm = [-i for i in fwhm]
    
    print(kendalltau(psnr_RefGT, psnr_RefSR))
    print(kendalltau(ssim_RefGT, ssim_RefSR))
    print(kendalltau(psnr_RefGT, FRC))
    print(kendalltau(ssim_RefGT, FRC))
    print(kendalltau(psnr_RefGT, niqe))
    print(kendalltau(ssim_RefGT, niqe))
    print(kendalltau(psnr_RefGT, fwhm))
    print(kendalltau(ssim_RefGT, fwhm))
    print(kendalltau(psnr_RefGT, ssim_RefSR))
    print(kendalltau(ssim_RefGT, psnr_RefSR))
    

def CalSRQA_MTs():
    print('--------------------------------------- MTs -------------------------------------------------')
    fwhm = [205.6001468758,210.171537,202.9327576,203.129324969,200.811909, 196.73186, 208.52057,208.195335,207.526323797,208.19512258,208.61479831,211.7174635, 194.99495,195.04987,194.9582,194.8565,199.2463,198.3778,209.1883,196.0519,196.2626493,208.32939,192.956,190.463]
    fwhm = [-i for i in fwhm]
    NIQE = [21.15912, 39.7952, 21.093, 12.9424, 11.164, 12.092487,
            7.2014, 11.1077, 6.7997, 20.5894, 20.969, 20.9694,
            11.0227, 10.9569, 11.5980, 11.6263, 12.7824, 12.1407, 12.4723, 10.011,
            9.1675, 12.6447, 9.9117, 11.071]
    NIQE = [-i for i in NIQE]
    FRC = [2.931733397, 2.90148699, 0.0, 2.8917273, 2.768858425, 2.795385,
           1.545844, 5.174486, 1.568498677, 0.0, 0.0, 0.0,
           2.7905439884, 2.887026, 2.796116, 2.78744185875, 2.788845534, 2.50677458, 2.8447611, 2.74515569,
           2.6207,
           2.8416389, 2.94182488, 2.877659898]
    ref_psnrGT = [100, 18.456, 21.875, 25.044, 25.003, 25.429,  # 25.23,
                  18.390, 17.226, 18.345, 18.462, 18.374, 18.586,
                  24.808, 24.629, 25.304, 25.121, 25.528, 25.763, 25.065, 24.785,
                  19.626,
                  25.637, 24.939, 25.258]
    ref_psnrGTss = [1, 0.5731, 0.6226, 0.7881, 0.7678, 0.7984,  # 0.7985,
                    0.5394, 0.4812, 0.5201, 0.5741, 0.5452, 0.5602,
                    0.7515, 0.7715, 0.7873, 0.7863, 0.8008, 0.7875, 0.7950, 0.7549,
                    0.6626,
                    0.8099, 0.7676, 0.7819]
    predicted_psnrUniFMIR = [25.326, 17.981, 23.893, 31.705, 31.581, 34.61,  # Inf,
                             18.237, 17.116, 18.167, 18.327, 18.230, 18.451,
                             30.542, 31.978, 34.06, 33.953, 33.980, 32.806, 33.084, 31.552,
                             19.561,
                             30.742, 30.545, 31.359]
    predicted_psnrUniFMIRss = [0.7987, 0.6487, 0.7386, 0.9446, 0.9339, 0.9762,  # 1,
                               0.6192, 0.5401, 0.5908, 0.6687, 0.6274, 0.6483,
                               0.9100, 0.9415, 0.9617, 0.9640, 0.9676, 0.9495, 0.9641, 0.9175,
                               0.7676,
                               0.9460, 0.9089, 0.9286]

    k1 = kendalltau(ref_psnrGT, fwhm)
    k2 = kendalltau(ref_psnrGTss, fwhm)
    k3 = kendalltau(ref_psnrGT, FRC)
    k4 = kendalltau(ref_psnrGTss, FRC)
    k5 = kendalltau(ref_psnrGT, NIQE)
    k6 = kendalltau(ref_psnrGTss, NIQE)
    k7 = kendalltau(ref_psnrGT, predicted_psnrUniFMIR)
    k8 = kendalltau(ref_psnrGTss, predicted_psnrUniFMIRss)
    k9 = kendalltau(ref_psnrGT, predicted_psnrUniFMIRss)
    k10 = kendalltau(ref_psnrGTss, predicted_psnrUniFMIR)
    print(k1, k2,k3,k4,k5,k6,k7,k8,k9,k10)
    
    

if __name__ == '__main__':
    inf = 100
    # CalDenoiseQA_T()
    # CalDenoiseQA_P()
    CalProjQA_Refswinir()
    # CalISOQA()
    # CalSRQA_Fact()
    # CalSRQA_CCPs()
    # CalSRQA_ER()
    # CalSRQA_MTs()
